#!/bin/bash

version="1.0"

flush()
{
	echo "flush"
}

remove_config()
{
	echo "remove"
}

add_config()
{
	echo "add"
}

# Created by argbash-init v2.8.0
# ARG_OPTIONAL_REPEATED([add],[a],[Add configuration files to Xorg config cache],[])
# ARG_OPTIONAL_REPEATED([remove],[r],[Remove configuration files from Xorg config cache],[])
# ARG_OPTIONAL_BOOLEAN([startx],[x],[Start an Xorg session],[off])
# ARG_OPTIONAL_BOOLEAN([flush],[f],[Flush Xorg config cache of files added by xconf],[off])
# ARG_VERBOSE([v])
# ARG_HELP([Configure and manage Xorg sessions. Version $version])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.8.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info


die()
{
	local _ret=$2
	test -n "$_ret" || _ret=1
	test "$_PRINT_HELP" = yes && print_help >&2
	echo "$1" >&2
	exit ${_ret}
}


begins_with_short_option()
{
	local first_option all_short_options='arxfvh'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_add=()
_arg_remove=()
_arg_startx="off"
_arg_flush="off"
_arg_verbose=0


print_help()
{
	printf '%s\n' "Configure and manage Xorg sessions. Version $version"
	printf 'Usage: %s [-a|--add <arg>] [-r|--remove <arg>] [-x|--(no-)startx] [-f|--(no-)flush] [-v|--verbose] [-h|--help]\n' "$0"
	printf '\t%s\n' "-a, --add:     Add configuration files to Xorg config cache (empty by default)"
	printf '\t%s\n' "-r, --remove:  Remove configuration files from Xorg config cache (empty by default)"
	printf '\t%s\n' "-x, --startx:  Start an Xorg session (off by default)"
	printf '\t%s\n' "-f, --flush:   Flush Xorg config cache of files added by xconf (off by default)"
	printf '\t%s\n' "-v, --verbose: Set verbose output (can be specified multiple times to increase the effect)"
	printf '\t%s\n' "-h, --help:    Prints help"
}


parse_commandline()
{
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			-a|--add)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_add+=("$2")
				shift
				;;
			--add=*)
				_arg_add+=("${_key##--add=}")
				;;
			-a*)
				_arg_add+=("${_key##-a}")
				;;
			-r|--remove)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_remove+=("$2")
				shift
				;;
			--remove=*)
				_arg_remove+=("${_key##--remove=}")
				;;
			-r*)
				_arg_remove+=("${_key##-r}")
				;;
			-x|--no-startx|--startx)
				_arg_startx="on"
				test "${1:0:5}" = "--no-" && _arg_startx="off"
				;;
			-x*)
				_arg_startx="on"
				_next="${_key##-x}"
				if test -n "$_next" -a "$_next" != "$_key"
				then
					begins_with_short_option "$_next" && shift && set -- "-x" "-${_next}" "$@" || die "The short option '$_key' can't be decomposed to ${_key:0:2} and -${_key:2}, because ${_key:0:2} doesn't accept value and '-${_key:2:1}' doesn't correspond to a short option."
				fi
				;;
			-f|--no-flush|--flush)
				_arg_flush="on"
				test "${1:0:5}" = "--no-" && _arg_flush="off"
				;;
			-f*)
				_arg_flush="on"
				_next="${_key##-f}"
				if test -n "$_next" -a "$_next" != "$_key"
				then
					begins_with_short_option "$_next" && shift && set -- "-f" "-${_next}" "$@" || die "The short option '$_key' can't be decomposed to ${_key:0:2} and -${_key:2}, because ${_key:0:2} doesn't accept value and '-${_key:2:1}' doesn't correspond to a short option."
				fi
				;;
			-v|--verbose)
				_arg_verbose=$((_arg_verbose + 1))
				;;
			-v*)
				_arg_verbose=$((_arg_verbose + 1))
				_next="${_key##-v}"
				if test -n "$_next" -a "$_next" != "$_key"
				then
					begins_with_short_option "$_next" && shift && set -- "-v" "-${_next}" "$@" || die "The short option '$_key' can't be decomposed to ${_key:0:2} and -${_key:2}, because ${_key:0:2} doesn't accept value and '-${_key:2:1}' doesn't correspond to a short option."
				fi
				;;
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_PRINT_HELP=yes die "FATAL ERROR: Got an unexpected argument '$1'" 1
				;;
		esac
		shift
	done
}

parse_commandline "$@"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash

if [[ $_arg_flush == "on" ]]; then flush; fi
for config in $_arg_remove; do remove_config $config; done
for config in $_arg_add; do add_config $config; done
if [[ $_arg_startx == "on" ]]; then startx; fi

# ] <-- needed because of Argbash
